import logging
import time
import pandas as pd
import asyncio
import io
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.excel_processor import ExcelProcessor
from services.zzap_api import ZzapAPI
from utils.formatters import format_progress_message
from handlers.auth import authorized_users

logger = logging.getLogger(__name__)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        user_id = query.from_user.id
        if user_id not in authorized_users:
            await query.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        if query.data == "upload_file":
            await query.message.reply_text(
                "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à Excel —Ñ–∞–π–ª.\n"
                "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏ *catalog\\_article* –∏ *brand*",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–Ω–æ–ø–∫–∏: {str(e)}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )

async def process_excel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    user_id = update.effective_user.id

    if user_id not in authorized_users:
        await update.message.reply_text("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    try:
        if not update.message.document:
            await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel —Ñ–∞–π–ª.")
            return

        if not update.message.document.file_name.endswith(('.xlsx', '.xls')):
            await update.message.reply_text("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã Excel (.xlsx –∏–ª–∏ .xls)")
            return

        file = await context.bot.get_file(update.message.document.file_id)
        input_bytes = io.BytesIO()
        await file.download_to_memory(input_bytes)
        input_bytes.seek(0)

        try:
            data = pd.read_excel(input_bytes)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {str(e)}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel –∏ –Ω–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
            return

        total_rows = len(data)
        if total_rows == 0:
            await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
            return

        processed_rows = 0
        last_update_time = time.time()
        update_interval = 0.5
        results = []

        progress_message = await update.message.reply_text(
            format_progress_message(processed_rows, total_rows, total_rows * 30)
        )

        for index, row in data.iterrows():
            partnumber = row.get("catalog_article")
            brand = row.get("brand")

            if pd.isna(partnumber) or pd.isna(brand):
                continue

            current_time = time.time()
            if current_time - last_update_time >= update_interval:
                remaining_time = (total_rows - processed_rows) * 30
                await progress_message.edit_text(
                    format_progress_message(processed_rows, total_rows, remaining_time)
                )
                last_update_time = current_time

            try:
                json_data = await ZzapAPI.get_part_info(partnumber, brand)
                results.append({
                    "–ê—Ä—Ç–∏–∫—É–ª": partnumber,
                    "–ë—Ä–µ–Ω–¥": brand,
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": json_data.get("class_cat", ""),
                    "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": json_data.get("class_man", ""),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –Ω–∞–ª–∏—á–∏–∏": json_data.get("price_count_instock", 0),
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ –Ω–∞–ª–∏—á–∏–∏": json_data.get("price_min_instock", 0.0),
                    "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –≤ –Ω–∞–ª–∏—á–∏–∏": json_data.get("price_avg_instock", 0.0),
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –≤ –Ω–∞–ª–∏—á–∏–∏": json_data.get("price_max_instock", 0.0),
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥ –∑–∞–∫–∞–∑": json_data.get("price_count_order", 0),
                    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥ –∑–∞–∫–∞–∑": json_data.get("price_min_order", 0.0),
                    "–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–¥ –∑–∞–∫–∞–∑": json_data.get("price_avg_order", 0.0),
                    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –ø–æ–¥ –∑–∞–∫–∞–∑": json_data.get("price_max_order", 0.0),
                })
                processed_rows += 1

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {partnumber} ({brand}): {str(e)}")
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {partnumber} ({brand}): {str(e)}")

            await asyncio.sleep(30)

        await progress_message.edit_text(
            format_progress_message(processed_rows, total_rows, 0)
        )

        try:
            output_bytes = ExcelProcessor.create_result_excel(results)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞: {str(e)}")
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞")

        keyboard = [[InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª", callback_data="upload_file")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        stats_message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {total_rows}\n"
            f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {len(results)}\n"
            f"‚Ä¢ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {total_rows - len(results)}\n\n"
            "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª."
        )

        try:
            await update.message.reply_document(
                document=output_bytes,
                filename="ZZAP_—Ä–µ–∑—É–ª—å—Ç–∞—Ç.xlsx",
                caption=stats_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            raise Exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

        await progress_message.delete()

    except Exception as e:
        error_message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
        logger.error(error_message)

        keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="upload_file")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            error_message + "\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.",
            reply_markup=reply_markup
        )

        if 'progress_message' in locals():
            await progress_message.delete()
